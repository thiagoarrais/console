AC_INIT(vte.pc.in)
VERSION=`grep ^Version: $srcdir/vte.spec | awk '{print $NF}'`
AM_INIT_AUTOMAKE(vte,$VERSION)

AC_ISC_POSIX
AC_PROG_CC
AC_STDC_HEADERS
AM_PROG_CC_STDC
AM_MAINTAINER_MODE

AM_PROG_LIBTOOL
ALL_LINGUAS="cs da de fr nl no pt_BR sv vi"
AM_GLIB_GNU_GETTEXT
AC_EGREP_CPP(glibc,
		[
		 #include <stdio.h>
		 #ifdef __GLIBC__
		 glibc
		 #endif
		],
		AC_DEFINE(_GNU_SOURCE,1,[Use all features.]))

# On some OSs, AC_PATH_XTRA doesn't work right(?), so let the user specify
# X_PRE_LIBS and X_EXTRA_LIBS to add even more libraries, and add -lX11 to
# the list of libraries for grins.
AC_PATH_XTRA
X_LIBS="$X_PRE_LIBS $X_LIBS -lX11 $X_EXTRA_LIBS"
PKG_CHECK_MODULES(GOBJECT,[glib-2.0 gobject-2.0])
savelibs="$LIBS"
LIBS="$X_LIBS $LIBS"
if pkg-config --exists pangoxft '>=' 1.1.0 ; then
	AC_DEFINE(HAVE_XFT2,1,[Whether we have Xft version 2])
	PKG_CHECK_MODULES(VTE,[glib-2.0 gobject-2.0 gdk-pixbuf-2.0 gtk+-2.0 pangox fontconfig xft])
else
	PKG_CHECK_MODULES(VTE,[glib-2.0 gobject-2.0 gdk-pixbuf-2.0 gtk+-2.0 pangox])
fi
LIBS="$savelibs"
# Check whether the combination of X and GLib/Pango/GTK+ libraries includes
# Xft somewhere.
savecppflags="$CPPFLAGS"
savelibs="$LIBS"
CPPFLAGS="$VTE_CFLAGS $X_CFLAGS $CPPFLAGS"
LIBS="$VTE_LIBS $X_LIBS"
AC_CHECK_FUNC(XftDrawString32,[AC_DEFINE(HAVE_XFT,1,[Whether or not Xft is available.])])
CPPFLAGS="$savecppflags"
LIBS="$savelibs"

# Define macros to disable accidental use of deprecated functionality.
AC_DEFINE(G_DISABLE_DEPRECATED,1,[Disable deprecated glib features.])
AC_DEFINE(GDK_DISABLE_DEPRECATED,1,[Disable deprecated gdk features.])
AC_DEFINE(GDK_PIXBUF_DISABLE_DEPRECATED,1,[Disable deprecated gdk-pixbuf features.])
AC_DEFINE(GTK_DISABLE_DEPRECATED,1,[Disable deprecated gtk features.])
AC_DEFINE(PANGO_DISABLE_DEPRECATED,1,[Disable deprecated pango features.])

AC_DEFINE(VTE_UTF8_BPC,6,[Maximum number of bytes used per UTF-8 character.])
AC_DEFINE_UNQUOTED(PACKAGE,"$PACKAGE",[Package name.])
AC_CHECK_FUNCS(getpt grantpt unlockpt ptsname ptsname_r sendmsg)
AC_CHECK_FUNC(socket,[have_socket=1],AC_CHECK_LIB(socket,socket,[have_socket=1; LIBS="$LIBS -lsocket"]))
AC_CHECK_FUNC(socketpair,[have_socketpair=1],AC_CHECK_LIB(socket,socketpair,[have_socketpair=1; LIBS="$LIBS -lsocket"]))
AC_CHECK_HEADERS(sys/un.h stropts.h termios.h wchar.h)

if test x$have_socket = x1 ; then
	AC_DEFINE(HAVE_SOCKET,1,[Define if you have the `socket' function.])
fi
if test x$have_socketpair = x1 ; then
	AC_DEFINE(HAVE_SOCKETPAIR,1,[Define if you have the `socketpair' function.])
fi

if test x$USE_MAINTAINER_MODE != x ; then
	if test x$USE_MAINTAINER_MODE != xno ; then
		if test x$GCC = xyes ; then
			CFLAGS="${CFLAGS} -std=c99"
			CFLAGS="${CFLAGS} -Wall"
			CFLAGS="${CFLAGS} -Waggregate-return"
			CFLAGS="${CFLAGS} -Wcast-align"
			CFLAGS="${CFLAGS} -Wimplicit"
			CFLAGS="${CFLAGS} -Wmissing-declarations"
			CFLAGS="${CFLAGS} -Wmissing-prototypes"
			CFLAGS="${CFLAGS} -Wpointer-arith"
			CFLAGS="${CFLAGS} -Wstrict-prototypes"
			CFLAGS="${CFLAGS} -Wuninitialized"
			#CFLAGS="${CFLAGS} −Wsign−compare"
			#CFLAGS="${CFLAGS} −Wunused-value"
		fi
		VTE_DEBUG=1
	fi
fi
if test x$VTE_DEBUG = x1 ; then
	AC_DEFINE(VTE_DEBUG,,[Enable debugging messages.])
fi

wcs_funcs_includes="
#ifdef HAVE_STRING_H
# if !STDC_HEADERS && HAVE_MEMORY_H
#  include <memory.h>
# endif
# include <string.h>
#else
# ifdef HAVE_STRINGS_H
#  include <strings.h>
# endif
#endif
#ifdef HAVE_WCHAR_H
# include <wchar.h>
#endif
"

AC_CHECK_TYPES(wint_t, AC_DEFINE(HAVE_WINT_T, , [Defined when the wint_t type is supported]), ,$wcs_funcs_includes)

BUILD_PYTHON=false
AC_MSG_CHECKING([for pygtk-2.0])
if pkg-config --exists pygtk-2.0 ; then
	AC_MSG_RESULT([found])
	PKG_CHECK_MODULES(PYGTK,[pygtk-2.0])
	PYGTK_DATADIR=`pkg-config --variable=datadir pygtk-2.0`
	AC_SUBST(PYGTK_DATADIR)
	AM_PATH_PYTHON
	AC_MSG_CHECKING(for python >= 2.2)
	prog="
import sys, string
minver = (2,2,0,'final',0)
if sys.version_info < minver:
  sys.exit(1)
sys.exit(0)"
	if $PYTHON -c "$prog" 1>&AC_FD_CC 2>&AC_FD_CC
	then
	  AC_MSG_RESULT(okay)
          AM_CHECK_PYTHON_HEADERS([BUILD_PYTHON=true],
			          [AC_MSG_RESULT(could not find Python headers)])
	else
	  AC_MSG_RESULT(too old)
	fi
else
	AC_MSG_RESULT([not found])
fi
AC_SUBST(PYTHONREV)
AC_SUBST(PYTHONMODULES)
AM_CONDITIONAL(BUILD_PYTHON_MODULES, $BUILD_PYTHON)

mylibdir=`eval echo $libdir`
mylibexecdir=`eval echo $libexecdir`
mydatadir=`eval echo $datadir`
if test x$exec_prefix = xNONE ; then
	if test x$prefix = xNONE ; then
		mylibdir=` echo $mylibdir  | sed s,NONE,$ac_default_prefix,g`
		mylibexecdir=` echo $mylibexecdir  | sed s,NONE,$ac_default_prefix,g`
	else
		mylibdir=` echo $mylibdir  | sed s,NONE,$prefix,g`
		mylibexecdir=` echo $mylibexecdir  | sed s,NONE,$prefix,g`
	fi
fi
if test x$prefix = xNONE ; then
	mydatadir=`echo $mydatadir | sed s,NONE,$ac_default_prefix,g`
fi
AC_DEFINE_UNQUOTED(PKGLIBDIR,"$mylibdir/$PACKAGE",
                   [The location where package-specific helpers can be found.])
AC_DEFINE_UNQUOTED(LIBEXECDIR,"$mylibexecdir",
                   [The location where package-specific helpers can be found.])
AC_DEFINE_UNQUOTED(DATADIR,"$mydatadir",
                   [The location where arch-independent package-specific data can be found.])
AC_DEFINE_UNQUOTED(LOCALEDIR,"$mydatadir/locale",
                   [The location where locale data can be found.])

GETTEXT_PACKAGE=vte
AC_SUBST(GETTEXT_PACKAGE)

AC_ARG_ENABLE(gnome-pty-helper, [  --enable-gnome-pty-helper Build a setuid helper for opening ptys [default=yes]], enable_gnome_pty_helper="$enableval", enable_gnome_pty_helper=yes)
if test "$enable_gnome_pty_helper" != no; then
	AC_CONFIG_SUBDIRS(gnome-pty-helper)
fi

################################################################################

# This is a check for gtk-doc which you can insert into your configure.in.
# You shouldn't need to change it at all.

##################################################
# Check for gtk-doc.
##################################################

AC_ARG_WITH(html-dir, [  --with-html-dir=PATH path to installed docs ])

if test "x$with_html_dir" = "x" ; then
  HTML_DIR='${datadir}/gtk-doc/html'
else
  HTML_DIR=$with_html_dir
fi

AC_SUBST(HTML_DIR)

AC_CHECK_PROG(GTKDOC, gtkdoc-mkdb, true, false)

gtk_doc_min_version=0.6
if $GTKDOC ; then 
    gtk_doc_version=`gtkdoc-mkdb --version`
    AC_MSG_CHECKING([gtk-doc version ($gtk_doc_version) >= $gtk_doc_min_version])
    if perl <<EOF ; then
      exit (("$gtk_doc_version" =~ /^[[0-9]]+\.[[0-9]]+$/) &&
            ("$gtk_doc_version" >= "$gtk_doc_min_version") ? 0 : 1);
EOF
      AC_MSG_RESULT(yes)
   else
      AC_MSG_RESULT(no)
      GTKDOC=false
   fi
fi

dnl Let people disable the gtk-doc stuff.
AC_ARG_ENABLE(gtk-doc, [  --enable-gtk-doc  Use gtk-doc to build documentation [default=auto]], enable_gtk_doc="$enableval", enable_gtk_doc=auto)

if test x$enable_gtk_doc = xauto ; then
  if test x$GTKDOC = xtrue ; then
    enable_gtk_doc=yes
  else
    enable_gtk_doc=no 
  fi
fi

AM_CONDITIONAL(ENABLE_GTK_DOC, test x$enable_gtk_doc = xyes)

################################################################################

AM_CONFIG_HEADER(config.h)

AC_OUTPUT([
Makefile
src/Makefile
termcaps/Makefile
python/Makefile
po/Makefile.in
doc/Makefile
doc/reference/Makefile
vte.pc
])
