<!-- ##### SECTION ./tmpl/caps.sgml:Long_Description ##### -->
<para>

</para>


<!-- ##### SECTION ./tmpl/caps.sgml:See_Also ##### -->
<para>

</para>


<!-- ##### SECTION ./tmpl/caps.sgml:Short_Description ##### -->
Global structures which contain terminal capability names and Xterm control
sequence definitions.


<!-- ##### SECTION ./tmpl/caps.sgml:Title ##### -->
caps


<!-- ##### SECTION ./tmpl/debug.sgml:Long_Description ##### -->
<para>
Functions in libvte will only output debugging information if the library was
configured with --enable-maintainer-mode.
</para>


<!-- ##### SECTION ./tmpl/debug.sgml:See_Also ##### -->
<para>

</para>


<!-- ##### SECTION ./tmpl/debug.sgml:Short_Description ##### -->
Facilities for enabling debugging message output from libvte.


<!-- ##### SECTION ./tmpl/debug.sgml:Title ##### -->
debug


<!-- ##### SECTION ./tmpl/iso2022.sgml:Long_Description ##### -->
<para>

</para>


<!-- ##### SECTION ./tmpl/iso2022.sgml:See_Also ##### -->
<para>

</para>


<!-- ##### SECTION ./tmpl/iso2022.sgml:Short_Description ##### -->
A state machine for converting #gunichar strings with embedded ISO-2022 control
sequences into plain #gunichar strings.


<!-- ##### SECTION ./tmpl/iso2022.sgml:Title ##### -->
iso2022


<!-- ##### SECTION ./tmpl/marshal.sgml:Long_Description ##### -->
<para>

</para>


<!-- ##### SECTION ./tmpl/marshal.sgml:See_Also ##### -->
<para>

</para>


<!-- ##### SECTION ./tmpl/marshal.sgml:Short_Description ##### -->
Signal marshalers.


<!-- ##### SECTION ./tmpl/marshal.sgml:Title ##### -->
marshal


<!-- ##### SECTION ./tmpl/ring.sgml:Long_Description ##### -->
<para>

</para>


<!-- ##### SECTION ./tmpl/ring.sgml:See_Also ##### -->
<para>

</para>


<!-- ##### SECTION ./tmpl/ring.sgml:Short_Description ##### -->



<!-- ##### SECTION ./tmpl/ring.sgml:Title ##### -->
ring


<!-- ##### SECTION ./tmpl/table.sgml:Long_Description ##### -->
<para>
This control sequence parser uses a tree of tables, similar in design to that
used by Xterm, but generated dynamically at run-time using data from the system
termcap database.
</para>


<!-- ##### SECTION ./tmpl/table.sgml:See_Also ##### -->
<para>

</para>


<!-- ##### SECTION ./tmpl/table.sgml:Short_Description ##### -->
The tree-of-tables sequence parser.


<!-- ##### SECTION ./tmpl/table.sgml:Title ##### -->
table


<!-- ##### SECTION ./tmpl/termcap.sgml:Long_Description ##### -->
<para>

</para>


<!-- ##### SECTION ./tmpl/termcap.sgml:See_Also ##### -->
<para>

</para>


<!-- ##### SECTION ./tmpl/termcap.sgml:Short_Description ##### -->
A set of functions for parsing the system termcap database.


<!-- ##### SECTION ./tmpl/termcap.sgml:Title ##### -->
termcap


<!-- ##### SECTION ./tmpl/trie.sgml:Long_Description ##### -->
<para>
This control sequence parser uses a tree of nodes and attempts to find the
control sequence which best matches a given chunk of data.
</para>


<!-- ##### SECTION ./tmpl/trie.sgml:See_Also ##### -->
<para>

</para>


<!-- ##### SECTION ./tmpl/trie.sgml:Short_Description ##### -->
The trie sequence parser.


<!-- ##### SECTION ./tmpl/trie.sgml:Title ##### -->
trie


<!-- ##### MACRO VTE_CAP_APC ##### -->
<para>

</para>


<!-- ##### MACRO VTE_CAP_CSI ##### -->
<para>

</para>


<!-- ##### MACRO VTE_CAP_ESC ##### -->
<para>

</para>


<!-- ##### MACRO VTE_CAP_OSC ##### -->
<para>

</para>


<!-- ##### MACRO VTE_CAP_PM ##### -->
<para>

</para>


<!-- ##### MACRO VTE_CAP_ST ##### -->
<para>

</para>


<!-- ##### MACRO VTE_IS_TERMINAL_ERASE_BINDING ##### -->
<para>

</para>

@obj: 

<!-- ##### MACRO VTE_TYPE_TERMINAL_ERASE_BINDING ##### -->
<para>

</para>


<!-- ##### ENUM VteDebugFlags ##### -->
<para>

</para>

@VTE_DEBUG_MISC: 
@VTE_DEBUG_PARSE: 
@VTE_DEBUG_IO: 
@VTE_DEBUG_UPDATES: 
@VTE_DEBUG_EVENTS: 
@VTE_DEBUG_SIGNALS: 
@VTE_DEBUG_SELECTION: 
@VTE_DEBUG_SUBSTITUTION: 
@VTE_DEBUG_RING: 
@VTE_DEBUG_PTY: 

<!-- ##### STRUCT VteRing ##### -->
<para>

</para>

@free: 
@user_data: 
@array: 
@delta: 
@length: 
@max: 

<!-- ##### USER_FUNCTION VteRingFreeFunc ##### -->
<para>

</para>

@freeing: 
@data: 

<!-- ##### FUNCTION vte_capability_init ##### -->
<para>

</para>


<!-- ##### FUNCTION vte_debug_on ##### -->
<para>

</para>

@flags: 
@Returns: 

<!-- ##### FUNCTION vte_debug_parse_string ##### -->
<para>

</para>

@string: 

<!-- ##### FUNCTION vte_iso2022_free ##### -->
<para>

</para>

@p: 

<!-- ##### FUNCTION vte_iso2022_substitute ##### -->
<para>

</para>

@state: 
@instring: 
@length: 
@outstring: 
@specials: 
@Returns: 

<!-- ##### FUNCTION vte_ring_append ##### -->
<para>

</para>

@ring: 
@data: 

<!-- ##### FUNCTION vte_ring_at ##### -->
<para>

</para>

@ring: 
@Param2: 
@Returns: 
@__ring: 
@__position: 

<!-- ##### FUNCTION vte_ring_contains ##### -->
<para>

</para>

@ring: 
@Param2: 
@Returns: 
@__ring: 
@__position: 

<!-- ##### FUNCTION vte_ring_delta ##### -->
<para>

</para>

@ring: 
@Returns: 
@__ring: 

<!-- ##### FUNCTION vte_ring_free ##### -->
<para>

</para>

@ring: 
@free_elements: 

<!-- ##### MACRO vte_ring_index ##### -->
<para>

</para>

@ring: 
@cast: 
@position: 
@__ring: 
@__cast: 
@__position: 

<!-- ##### FUNCTION vte_ring_insert ##### -->
<para>

</para>

@ring: 
@Param2: 
@data: 
@position: 

<!-- ##### FUNCTION vte_ring_length ##### -->
<para>

</para>

@ring: 
@Returns: 
@__ring: 

<!-- ##### FUNCTION vte_ring_new ##### -->
<para>

</para>

@Param1: 
@free: 
@data: 
@Returns: 
@max_elements: 

<!-- ##### FUNCTION vte_ring_next ##### -->
<para>

</para>

@ring: 
@Returns: 
@__ring: 

<!-- ##### FUNCTION vte_ring_remove ##### -->
<para>

</para>

@ring: 
@Param2: 
@free_element: 
@position: 

<!-- ##### FUNCTION vte_table_add ##### -->
<para>

</para>

@table: 
@pattern: 
@length: 
@result: 
@quark: 

<!-- ##### FUNCTION vte_table_free ##### -->
<para>

</para>

@table: 

<!-- ##### FUNCTION vte_table_match ##### -->
<para>

</para>

@table: 
@pattern: 
@length: 
@res: 
@consumed: 
@quark: 
@array: 
@Returns: 

<!-- ##### FUNCTION vte_table_narrow_encoding ##### -->
<para>

</para>

@Returns: 

<!-- ##### FUNCTION vte_table_print ##### -->
<para>

</para>

@table: 

<!-- ##### FUNCTION vte_table_wide_encoding ##### -->
<para>

</para>

@Returns: 

<!-- ##### FUNCTION vte_termcap_find_boolean ##### -->
<para>

</para>

@termcap: 
@tname: 
@cap: 
@Returns: 

<!-- ##### FUNCTION vte_termcap_find_numeric ##### -->
<para>

</para>

@termcap: 
@tname: 
@cap: 
@Returns: 

<!-- ##### FUNCTION vte_termcap_find_string ##### -->
<para>

</para>

@termcap: 
@tname: 
@cap: 
@Returns: 

<!-- ##### FUNCTION vte_termcap_find_string_length ##### -->
<para>

</para>

@termcap: 
@tname: 
@cap: 
@length: 
@Returns: 

<!-- ##### FUNCTION vte_termcap_free ##### -->
<para>

</para>

@termcap: 

<!-- ##### FUNCTION vte_termcap_new ##### -->
<para>

</para>

@Returns: 

<!-- ##### FUNCTION vte_termcap_strip ##### -->
<para>

</para>

@termcap: 
@stripped: 
@len: 

<!-- ##### FUNCTION vte_terminal_erase_binding_get_type ##### -->
<para>

</para>

@Returns: 

<!-- ##### FUNCTION vte_trie_add ##### -->
<para>

</para>

@trie: 
@pattern: 
@length: 
@result: 
@quark: 

<!-- ##### FUNCTION vte_trie_free ##### -->
<para>

</para>

@trie: 

<!-- ##### FUNCTION vte_trie_match ##### -->
<para>

</para>

@trie: 
@pattern: 
@length: 
@res: 
@consumed: 
@quark: 
@array: 
@Returns: 

<!-- ##### FUNCTION vte_trie_narrow_encoding ##### -->
<para>

</para>

@Returns: 

<!-- ##### FUNCTION vte_trie_print ##### -->
<para>

</para>

@trie: 

<!-- ##### FUNCTION vte_trie_wide_encoding ##### -->
<para>

</para>

@Returns: 

