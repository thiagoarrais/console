<!-- ##### SECTION ./tmpl/iso2022.sgml:Long_Description ##### -->
<para>

</para>


<!-- ##### SECTION ./tmpl/iso2022.sgml:See_Also ##### -->
<para>

</para>


<!-- ##### SECTION ./tmpl/iso2022.sgml:Short_Description ##### -->
A state machine for converting #gunichar strings with embedded ISO-2022 control
sequences into plain #gunichar strings.


<!-- ##### SECTION ./tmpl/iso2022.sgml:Title ##### -->
iso2022


<!-- ##### SECTION ./tmpl/marshal.sgml:Long_Description ##### -->
<para>

</para>


<!-- ##### SECTION ./tmpl/marshal.sgml:See_Also ##### -->
<para>

</para>


<!-- ##### SECTION ./tmpl/marshal.sgml:Short_Description ##### -->
Signal marshalers.


<!-- ##### SECTION ./tmpl/marshal.sgml:Title ##### -->
marshal


<!-- ##### SECTION ./tmpl/table.sgml:Long_Description ##### -->
<para>
This control sequence parser uses a tree of tables, similar in design to that
used by Xterm, but generated dynamically at run-time using data from the system
termcap database.
</para>


<!-- ##### SECTION ./tmpl/table.sgml:See_Also ##### -->
<para>

</para>


<!-- ##### SECTION ./tmpl/table.sgml:Short_Description ##### -->
The tree-of-tables sequence parser.


<!-- ##### SECTION ./tmpl/table.sgml:Title ##### -->
table


<!-- ##### SECTION ./tmpl/trie.sgml:Long_Description ##### -->
<para>
This control sequence parser uses a tree of nodes and attempts to find the
control sequence which best matches a given chunk of data.
</para>


<!-- ##### SECTION ./tmpl/trie.sgml:See_Also ##### -->
<para>

</para>


<!-- ##### SECTION ./tmpl/trie.sgml:Short_Description ##### -->
The trie sequence parser.


<!-- ##### SECTION ./tmpl/trie.sgml:Title ##### -->
trie


<!-- ##### MACRO VTE_IS_TERMINAL_ERASE_BINDING ##### -->
<para>

</para>

@obj: 

<!-- ##### MACRO VTE_TYPE_TERMINAL_ERASE_BINDING ##### -->
<para>

</para>


<!-- ##### FUNCTION vte_iso2022_free ##### -->
<para>

</para>

@p: 

<!-- ##### FUNCTION vte_iso2022_substitute ##### -->
<para>

</para>

@state: 
@instring: 
@length: 
@outstring: 
@specials: 
@Returns: 

<!-- ##### FUNCTION vte_table_add ##### -->
<para>

</para>

@table: 
@pattern: 
@length: 
@result: 
@quark: 

<!-- ##### FUNCTION vte_table_free ##### -->
<para>

</para>

@table: 

<!-- ##### FUNCTION vte_table_match ##### -->
<para>

</para>

@table: 
@pattern: 
@length: 
@res: 
@consumed: 
@quark: 
@array: 
@Returns: 

<!-- ##### FUNCTION vte_table_narrow_encoding ##### -->
<para>

</para>

@Returns: 

<!-- ##### FUNCTION vte_table_print ##### -->
<para>

</para>

@table: 

<!-- ##### FUNCTION vte_table_wide_encoding ##### -->
<para>

</para>

@Returns: 

<!-- ##### FUNCTION vte_termcap_new ##### -->
<para>

</para>

@Returns: 

<!-- ##### FUNCTION vte_terminal_erase_binding_get_type ##### -->
<para>

</para>

@Returns: 

<!-- ##### FUNCTION vte_trie_add ##### -->
<para>

</para>

@trie: 
@pattern: 
@length: 
@result: 
@quark: 

<!-- ##### FUNCTION vte_trie_free ##### -->
<para>

</para>

@trie: 

<!-- ##### FUNCTION vte_trie_match ##### -->
<para>

</para>

@trie: 
@pattern: 
@length: 
@res: 
@consumed: 
@quark: 
@array: 
@Returns: 

<!-- ##### FUNCTION vte_trie_narrow_encoding ##### -->
<para>

</para>

@Returns: 

<!-- ##### FUNCTION vte_trie_print ##### -->
<para>

</para>

@trie: 

<!-- ##### FUNCTION vte_trie_wide_encoding ##### -->
<para>

</para>

@Returns: 

